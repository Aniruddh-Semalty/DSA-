            # Shortest path in directed Acylclic graph using topological sort


#include<iostream>
#include<vector>
#include<unordered_map>
#include<stack>




class Graph{
    public:
    unordered_map<int, list< pair< int,int > > > adjList;
    
    void addEdge(int u,int v,int weight)
    {
        pair<int,int>wt=make_pair(v,weight);
        adjList[u].push_back(wt);
        
    }
    
    void printAdj()
    {
        cout<<"Adjancency list => "<<endl;
        for(auto i:adjList)
        {
            cout<<i.first<<"->";
                for(auto j :i.second)
                {
                    cout<<"["<<j.first<<","<<j.second<<"]"<<" ";
                }
            cout<<endl;
        }
    }
    
    
    
    
    void topoSort(int node,stack<int>&s,vector<bool>&v)
    {
       
        v[node]=true;
        
        for(auto neighbour:adjList[node])
        {
            if(!v[neighbour.first]) 
            {
                topoSort(neighbour.first,s,v);
            }
            
        }
        //push it in stack while returning
         s.push(node);
        
     }
    
  void findShortestDistance(vector<int>&distance,stack<int>&s)
 {
         while(!s.empty())
   {
         int top=s.top();
        s.pop();
        if(distance[top]!=INT_MAX)
        {
           for(auto i:adjList[top])
                
            {
                if(distance[top]+i.second<distance[i.first])
                {
                    distance[i.first]=distance[top]+i.second;
                }
                
             }
            
            
        } 
     }
        
  }
    
};






int main() {
    //step 1->make a graph
Graph g;
g.addEdge(0,1,5);
g.addEdge(0,2,3);
g.addEdge(1,3,6);
g.addEdge(1,2,2);
g.addEdge(2,3,7);
g.addEdge(2,4,4);
g.addEdge(2,5,2);
g.addEdge(3,4,-1);
g.addEdge(4,5,-2);
g.printAdj();
    
    // step 2 -> topological sort for linear ordering
    stack<int>s;
    int n=6;
    vector<bool>visited(n);
    
    
    for(int i=0;i<n;i++)
    {
        if(!visited[i])
        {
           g.topoSort(i,s,visited); 
        }
    }
    
    
    //make distance array using stack
    int src=1; //your src node
    
    vector<int>distance(n,INT_MAX);
    distance[src]=0; //make distance from src to src as 0
    g.findShortestDistance(distance,s);
    
    cout<<endl<<"Shortest distance from "<<src<<"to all nodes =>"<<endl;
    for(int i=0;i<distance.size();i++)
    {
        cout<<distance[i]<<" ";
    }
    
   
    }
