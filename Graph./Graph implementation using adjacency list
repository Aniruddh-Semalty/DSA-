                                         //graph implentation using adjacency list through map 
#include<bits/stdc++.h>
template<typename t>
class Graph{
  public:
    unordered_map<t,vector<t>>adj;
    
    void addEdge(t u,t v ,bool direction)
    {
        //if direction is true it means directed edge
        //if direction is false it means undirected edge
        adj[u].push_back(v);
        if(direction==false) //means we have to add edge from v to u
            adj[v].push_back(u);
    
    
    }
    
    
    void printGraph()
    {
        
       for(auto i:adj)
       {
           cout<<i.first<<"=>";
           for(auto j : i.second)
               cout<<j<<" ";
           cout<<endl;
           
       }
        
        
    }
    
    
    
    
    
    
    
};








int main() {
    int n;
    cout<<"Enter no of nodes"<<endl;
    cin>>n;
    int m;
    cout<<"Enter no of edges"<<endl;
    cin>>m;
    Graph<int>g;
    
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin>>u>>v;
        g.addEdge(u,v,0);
    }
    g.printGraph();
    
    
    
    
}
