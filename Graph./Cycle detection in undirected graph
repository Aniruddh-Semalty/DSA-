                                       //cycle detection in an undirected graph using bfs and dfs

#include<unordered_map>
#include<queue>
#include<list>
bool bfsCycle(unordered_map<int,list<int>>&adjList,int src,unordered_map<int,bool>&visited)
{
    unordered_map<int,int>parent;
    queue<int>q;
    q.push(src);
    parent[src]=-1;
    visited[src]=true;
    while(!q.empty())
    {
        int frontnode=q.front();
        q.pop();
        for(auto adj :adjList[frontnode])
        {
            if(!visited[adj])
            {
                q.push(adj);
                parent[adj]=frontnode;
                visited[adj]=true;
            }
            else if(visited[adj]&&adj!=parent[frontnode])
            {
                return true;
            }


        }
    }
    return false;

}

bool dfsCycle(int src,unordered_map<int,list<int>>&adjList,unordered_map<int,bool>&visited,int parent)
{
    visited[src]=true;
    
    for(auto adj :adjList[src])
    {
        if(!visited[adj])
        {
            bool ans=dfsCycle(adj,adjList,visited,src);
            if(ans)
            return true;
        }
        else if(adj!=parent)
        {
            return true;
        }






    }
    return false;
}



string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // step1->create the adjacnecy list
   unordered_map<int,list<int>>adjList;
   for(int i=0;i<edges.size();i++)
   {
       int u=edges[i][0];
       int v=edges[i][1];
       adjList[u].push_back(v);
       adjList[v].push_back(u);
   }

    //create a visited data structure
    unordered_map<int,bool>visited; 
    //using bfs first;
    for(int i=0;i<n;i++)
    {
        if(!visited[i])
        {
            // bool ans=bfsCycle(adjList,i,visited);
            bool ans=dfsCycle(i,adjList,visited,-1);
            if(ans)
            return "Yes";
        }
    }
    return "No";



}
