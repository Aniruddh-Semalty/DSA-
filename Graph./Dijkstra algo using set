                                                         dijkstra algo using set

#include<iostream>
#include<limits.h>
#include<vector>
#include<unordered_map>
#include<set>
#include<list>

class Graph{
    public:
    //step 1->make adjacency list

    unordered_map<int,list<pair<int,int>>>adjList;
    
    void makeAdj(vector<vector<int>> &vec)
    {
         for(int i=0;i<vec.size();i++)
            {
            int u=vec[i][0];
            int v=vec[i][1];
            int wt=vec[i][2];

            adjList[u].push_back(make_pair(v,wt));
            adjList[v].push_back(make_pair(u,wt));
            }
    }
    
    void findShortestPathFromSrcToAll(set<pair<int,int>>&st, vector<int>&distance)
    {
        while(!st.empty())
        {
            auto top=*(st.begin());

            st.erase(st.begin());

            int distanceFromNode=top.first;
            int topNode=top.second;

            for(auto neighbour : adjList[topNode])
                {
                   if(neighbour.second+distanceFromNode<distance[neighbour.first])
                {
                    auto record=st.find(make_pair(distance[neighbour.first],neighbour.first));
                    if(record!=st.end())
                    {
                        st.erase(record);
                    }

                    distance[neighbour.first]=neighbour.second+distanceFromNode;
                    st.insert(make_pair(distance[neighbour.first],neighbour.first));
                    }

            }
    }
    }
    
    
    
    };








int main() {
    cout<<"Enter no of vertices"<<endl;
    int n;
    cin>>n;
    cout<<"Enter no of edges"<<endl;
    int e;
    cin>>e;
    
    
    
    vector<vector<int>> vec;
    for(int i=0;i<e;i++)
    {
        vector<int>temp;
        int a,b,c;
        cin>>a>>b>>c;
        temp.push_back(a);
        temp.push_back(b);
        temp.push_back(c);
        vec.push_back(temp);
        
    }
    //make graph class object
    Graph g;
   //make adjacency list
    g.makeAdj(vec);
    //make distance array
        vector<int>distance(n,INT_MAX);
        int source=0;
        distance[source]=0;
    //make set
        set<pair<int,int>>st;
        st.insert(make_pair(0,source));
    //find the shortest path
    g.findShortestPathFromSrcToAll(st,distance);
     
    // print distance array
    cout<<endl;
    cout<<"Shortest path to all nodes from "<<source<<endl;
    for(int i=0;i<distance.size();i++)
    {
        cout<<distance[i]<<" ";
    }
   
}
